import pandas as pd
import numpy as np
from datetime import datetime
from wyf.api import get_tradingdays, get_company_info, get_dailyquote_single, get_dailyquote_many, get_adj_info
from wyf.utils import int2datetime
from tqdm import tqdm

user = 'root'
passwd = 'rgf12345'
backward_date = 20151201
begin_date = 20160101
end_date = 20160131
fee_buy = 2 / 1000
fee_sell = 2 / 1000
stock_num = 20
cash_initial = 1e8
order_type = "OpenPrice"
tradingdays_back = get_tradingdays(user, passwd, backward_date, end_date)
tradingdays = get_tradingdays(user, passwd, begin_date, end_date)

basic_info_in = get_company_info(user, passwd, 'in')
basic_info_stop = get_company_info(user, passwd, 'stop')
basic_info_pause = get_company_info(user, passwd, 'pause')
basic_info_all = pd.concat([basic_info_in, basic_info_stop, basic_info_pause])
basic_info_all = basic_info_all.reset_index(drop=True)

change_days = []
choose_days = []
tradingdays_weekday = int2datetime(tradingdays)['tradingdays'].dt.weekday
for i in range(len(tradingdays_weekday) - 1):
    if tradingdays_weekday[i] == 4:
        choose_days.append(tradingdays['tradingdays'][i])
        change_days.append(tradingdays['tradingdays'][i + 1])

df_pos_all = pd.DataFrame(columns=['date', 'InnerCode', 'weight'])
for i in range(len(choose_days)):
    print("current choose day is: ", choose_days[i])
    index_end = tradingdays_back[tradingdays_back['tradingdays'] == choose_days[i]].index[0]
    bbb = tradingdays_back['tradingdays'][index_end - 19]
    eee = tradingdays_back['tradingdays'][index_end]
    df = pd.DataFrame(columns=basic_info_all['InnerCode'].tolist(), index=range(20))
    for iii in basic_info_all['InnerCode']:
        try:
            df[iii] = get_dailyquote_many(user, passwd, iii, 'TurnoverValue', bbb, eee).values
        except (KeyError, ValueError) as e:
            print(e)
    df = df.fillna(0)
    df_mean = pd.DataFrame(columns=['InnerCode', 'mean_values'], index=range(df.shape[1]))
    df_mean['InnerCode'] = basic_info_all['InnerCode'].values
    df_mean['mean_values'] = df.mean(0).values
    df_mean = df_mean.sort_values(by='mean_values', ascending=False).reset_index(drop=True)
    changeday_index = tradingdays['tradingdays'][tradingdays['tradingdays']==change_days[i]].index[0] # 第一个changeday在整个时间表中的位置
    df_mean['able_to_buy'] = 0
    for jj in range(len(df_mean['InnerCode'])):
        stock = df_mean['InnerCode'][jj]
        df_mean['able_to_buy'][jj] = df[stock][changeday_index + 1]
    # 剔除不可买的股票
    df_mean = df_mean[df_mean['able_to_buy'] != 0]
    code_list = df_mean['InnerCode'][:stock_num]
    df_pos = pd.DataFrame(index=range(stock_num))
    df_pos['date'] = change_days[i]
    df_pos['InnerCode'] = code_list.values
    df_pos['weight'] = 1 / stock_num
    df_pos_all = pd.concat([df_pos_all, df_pos], axis=0)
df_pos_all = df_pos_all.reset_index(drop=True)

df_ret = pd.DataFrame(columns=['date', 'profit', 'capital'], index=range(len(tradingdays)))
df_ret['date'] = tradingdays['tradingdays'].values
df_ret['profit'] = 0.
df_ret['capital'] = cash_initial
take_position = 0
for i in range(len(tradingdays)):
    ddd = tradingdays['tradingdays'][i]
    if ddd in change_days:
        if ddd == change_days[0]:
            take_position += 1
            df0 = df_pos_all[df_pos_all['date'] == ddd].reset_index(drop=True)
            df_md = np.ones((len(df0), 8))
            for j in range(len(df0)):
                iii = df0['InnerCode'][j]
                df_md[j, 0] = cash_initial * df0['weight'][j]
                df_md[j, 1] = basic_info_all[basic_info_all['InnerCode'] == iii]['TradingUnit'].values[0]
                df_md[j, 2] = get_dailyquote_single(user, passwd, iii, order_type, ddd).values[0][0]
                df_md[j, 3] = int(df_md[j, 0] / df_md[j, 1] / df_md[j, 2])
                df_md[j, 4] = df_md[j, 3] * df_md[j, 1] * df_md[j, 2]
                df_md[j, 5] = df_md[j, 4] * fee_buy
                df_md[j, 7] = get_dailyquote_single(user, passwd, iii, 'ClosePrice', ddd).values[0][0]
            df_ret['profit'][i] = sum((df_md[:, 7] - df_md[:, 2]) * df_md[:, 1] * df_md[:, 3] - df_md[:, 5])
            df_ret['capital'][i] = df_ret['capital'][i - 1] + df_ret['profit'][i]
            df_md[:, 0] = df_md[:, 7] * df_md[:, 1] * df_md[:, 3]
        else:
            df0_old = df0
            df_md_old = df_md
            df0 = df_pos_all[df_pos_all['date'] == ddd].reset_index(drop=True)
            df_md = np.ones((len(df0), 8))
            divided_capital = 0
            money_collapse = 0
            for j in range(len(df0_old)):
                iii = df0_old['InnerCode'][j]
                if iii not in df0['InnerCode'].tolist():
                    try:
                        adj_info = get_adj_info(user, passwd, iii, ddd).values[0]
                        divided_capital = divided_capital + adj_info[0] * df_md[j, 1] * df_md[j, 3]
                        df_md[j, 3] = df_md[j, 3] * adj_info[1]
                        df_md[j, 2] = df_md[j, 3] / adj_info[1]
                    except:
                        pass
                    open_collapse = get_dailyquote_single(user, passwd, iii, order_type, ddd).values[0][0]
                    money_collapse = (open_collapse * (1 - fee_sell) - df_md[j, 2]) * df_md[j, 1] * df_md[j, 3]
            for j in range(len(df0)):
                iii = df0['InnerCode'][j]
                df_md[j, 0] = df_ret['capital'][i - 1] * df0['weight'][j]
                df_md[j, 1] = basic_info_all[basic_info_all['InnerCode'] == iii]['TradingUnit'].values[0]
                df_md[j, 2] = get_dailyquote_single(user, passwd, iii, order_type, ddd).values[0][0]
                df_md[j, 3] = int(df_md[j, 0] / df_md[j, 1] / df_md[j, 2])
                df_md[j, 4] = df_md[j, 3] * df_md[j, 1] * df_md[j, 2]
                money_sell = 0
                money_buy = 0
                money_change_fee = 0
                if iii in df0_old['InnerCode'].tolist():
                    index = df0_old['InnerCode'].tolist().index(iii)
                    try:
                        adj_info = get_adj_info(user, passwd, iii, ddd).values[0]
                        divided_capital = divided_capital + adj_info[0] * df_md[j, 1] * df_md[j, 3]
                        df_md[j, 3] = df_md[j, 3] * adj_info[1]
                    except:
                        pass
                    lot_add = (df_md[j, 0] - df_md_old[index, 0]) / df_md[j, 2] / df_md[j, 1]
                    if lot_add <= 0:
                        lot_add = int(-lot_add)
                        money_sell = money_sell + lot_add * df_md[j, 1] * df_md[j, 2]
                        money_change_fee = money_change_fee + money_sell * fee_sell
                    else:
                        lot_add = int(lot_add)
                        money_buy = money_buy + lot_add * df_md[j, 1] * df_md[j, 2]
                        money_change_fee = money_change_fee + money_buy * fee_buy
                    df_md[j, 5] = money_change_fee
                    df_md[j, 7] = get_dailyquote_single(user, passwd, iii, 'ClosePrice', ddd).values[0][0]
                else:
                    lot_add = int(df_md[j, 0] / df_md[j, 2] / df_md[j, 1])
                    money_buy = money_buy + lot_add * df_md[j, 2] * df_md[j, 3]
                    money_change_fee = money_change_fee + money_buy * fee_buy
                    df_md[j, 5] = money_change_fee
                    df_md[j, 7] = get_dailyquote_single(user, passwd, iii, 'ClosePrice', ddd).values[0][0]
            df_ret['profit'][i] = money_collapse + sum(
                (df_md[:, 7] - df_md[:, 2]) * df_md[:, 1] * df_md[:, 3] - df_md[:, 5])
            df_ret['capital'][i] = df_ret['capital'][i - 1] + df_ret['profit'][i]

    elif take_position == 1 and ddd not in change_days:
        divided_capital = 0
        for j in range(len(df0)):
            iii = df0['InnerCode'][j]
            try:
                adj_info = get_adj_info(user, passwd, iii, ddd).values[0]
                divided_capital = divided_capital + adj_info[0] * df_md[j, 1] * df_md[j, 3]
                df_md[j, 3] = df_md[j, 3] * adj_info[1]
                df_md[j, 2] = df_md[j, 3] / adj_info[1]
            except KeyError:
                df_md[j, 2] = df_md[j, 7]
            df_md[j, 7] = get_dailyquote_single(user, passwd, iii, 'ClosePrice', ddd).values[0][0]
        df_ret['profit'][i] = sum((df_md[:, 7] - df_md[:, 2]) * df_md[:, 1] * df_md[:, 3])
        df_ret['capital'][i] = df_ret['capital'][i - 1] + df_ret['profit'][i]
        df_md[:, 0] = df_md[:, 7] * df_md[:, 1] * df_md[:, 3]

